// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.13.0
// source: msg.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NatsSyncService_StartSync_FullMethodName = "/com.github.bredtape.gateway.nats_sync.v1.NatsSyncService/StartSync"
	NatsSyncService_StopSync_FullMethodName  = "/com.github.bredtape.gateway.nats_sync.v1.NatsSyncService/StopSync"
)

// NatsSyncServiceClient is the client API for NatsSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// nats sync service, to initiate sync of a stream from one deployment to another.
// To bootstrap the NatsSyncService itself, all deployments must have the
// StartSync requests published to their designated nats stream for this service
// (which matches either the source or sink deployment)
type NatsSyncServiceClient interface {
	// Start sync'ing a stream from one deployment to another.
	// Only one sync operation can be active pr combination of source_deployment, source_stream_name and sink_deployment
	// You cannot change the parameters of the sync operation,  but must send a StopSync,
	// then a new StartSync
	StartSync(ctx context.Context, in *StartSyncRequest, opts ...grpc.CallOption) (*StartSyncResponse, error)
	// Stop sync of a stream. See note on StartSync
	StopSync(ctx context.Context, in *StopSyncRequest, opts ...grpc.CallOption) (*StopSyncResponse, error)
}

type natsSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNatsSyncServiceClient(cc grpc.ClientConnInterface) NatsSyncServiceClient {
	return &natsSyncServiceClient{cc}
}

func (c *natsSyncServiceClient) StartSync(ctx context.Context, in *StartSyncRequest, opts ...grpc.CallOption) (*StartSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartSyncResponse)
	err := c.cc.Invoke(ctx, NatsSyncService_StartSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natsSyncServiceClient) StopSync(ctx context.Context, in *StopSyncRequest, opts ...grpc.CallOption) (*StopSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopSyncResponse)
	err := c.cc.Invoke(ctx, NatsSyncService_StopSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NatsSyncServiceServer is the server API for NatsSyncService service.
// All implementations must embed UnimplementedNatsSyncServiceServer
// for forward compatibility.
//
// nats sync service, to initiate sync of a stream from one deployment to another.
// To bootstrap the NatsSyncService itself, all deployments must have the
// StartSync requests published to their designated nats stream for this service
// (which matches either the source or sink deployment)
type NatsSyncServiceServer interface {
	// Start sync'ing a stream from one deployment to another.
	// Only one sync operation can be active pr combination of source_deployment, source_stream_name and sink_deployment
	// You cannot change the parameters of the sync operation,  but must send a StopSync,
	// then a new StartSync
	StartSync(context.Context, *StartSyncRequest) (*StartSyncResponse, error)
	// Stop sync of a stream. See note on StartSync
	StopSync(context.Context, *StopSyncRequest) (*StopSyncResponse, error)
	mustEmbedUnimplementedNatsSyncServiceServer()
}

// UnimplementedNatsSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNatsSyncServiceServer struct{}

func (UnimplementedNatsSyncServiceServer) StartSync(context.Context, *StartSyncRequest) (*StartSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSync not implemented")
}
func (UnimplementedNatsSyncServiceServer) StopSync(context.Context, *StopSyncRequest) (*StopSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSync not implemented")
}
func (UnimplementedNatsSyncServiceServer) mustEmbedUnimplementedNatsSyncServiceServer() {}
func (UnimplementedNatsSyncServiceServer) testEmbeddedByValue()                         {}

// UnsafeNatsSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NatsSyncServiceServer will
// result in compilation errors.
type UnsafeNatsSyncServiceServer interface {
	mustEmbedUnimplementedNatsSyncServiceServer()
}

func RegisterNatsSyncServiceServer(s grpc.ServiceRegistrar, srv NatsSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedNatsSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NatsSyncService_ServiceDesc, srv)
}

func _NatsSyncService_StartSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsSyncServiceServer).StartSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NatsSyncService_StartSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsSyncServiceServer).StartSync(ctx, req.(*StartSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatsSyncService_StopSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsSyncServiceServer).StopSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NatsSyncService_StopSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsSyncServiceServer).StopSync(ctx, req.(*StopSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NatsSyncService_ServiceDesc is the grpc.ServiceDesc for NatsSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NatsSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.bredtape.gateway.nats_sync.v1.NatsSyncService",
	HandlerType: (*NatsSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSync",
			Handler:    _NatsSyncService_StartSync_Handler,
		},
		{
			MethodName: "StopSync",
			Handler:    _NatsSyncService_StopSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}
