// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: msg.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeliverPolicy int32

const (
	// DeliverAllPolicy starts delivering messages from the very beginning of a
	// stream. This is the default.
	DeliverPolicy_DELIVER_POLICY_ALL DeliverPolicy = 0
	// DeliverLastPolicy will start the consumer with the last sequence
	// received.
	DeliverPolicy_DELIVER_POLICY_LAST DeliverPolicy = 1
	// DeliverNewPolicy will only deliver new messages that are sent after the
	// consumer is created.
	DeliverPolicy_DELIVER_POLICY_NEW DeliverPolicy = 2
	// DeliverByStartSequencePolicy will deliver messages starting from a given
	// sequence configured with OptStartSeq in ConsumerConfig.
	DeliverPolicy_DELIVER_POLICY_BY_START_SEQUENCE DeliverPolicy = 3
	// DeliverByStartTimePolicy will deliver messages starting from a given time
	// configured with OptStartTime in ConsumerConfig.
	DeliverPolicy_DELIVER_POLICY_BY_START_TIME DeliverPolicy = 4
)

// Enum value maps for DeliverPolicy.
var (
	DeliverPolicy_name = map[int32]string{
		0: "DELIVER_POLICY_ALL",
		1: "DELIVER_POLICY_LAST",
		2: "DELIVER_POLICY_NEW",
		3: "DELIVER_POLICY_BY_START_SEQUENCE",
		4: "DELIVER_POLICY_BY_START_TIME",
	}
	DeliverPolicy_value = map[string]int32{
		"DELIVER_POLICY_ALL":               0,
		"DELIVER_POLICY_LAST":              1,
		"DELIVER_POLICY_NEW":               2,
		"DELIVER_POLICY_BY_START_SEQUENCE": 3,
		"DELIVER_POLICY_BY_START_TIME":     4,
	}
)

func (x DeliverPolicy) Enum() *DeliverPolicy {
	p := new(DeliverPolicy)
	*p = x
	return p
}

func (x DeliverPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliverPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[0].Descriptor()
}

func (DeliverPolicy) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[0]
}

func (x DeliverPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliverPolicy.Descriptor instead.
func (DeliverPolicy) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

type StartSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the deployment to sync from
	SourceDeployment string `protobuf:"bytes,1,opt,name=source_deployment,json=sourceDeployment,proto3" json:"source_deployment,omitempty"`
	// the sink deployment, where the messages are to be published.
	SinkDeployment string `protobuf:"bytes,2,opt,name=sink_deployment,json=sinkDeployment,proto3" json:"sink_deployment,omitempty"`
	// source stream name. The stream could be mapped at the sink to whatever is needed.
	SourceStreamName string `protobuf:"bytes,3,opt,name=source_stream_name,json=sourceStreamName,proto3" json:"source_stream_name,omitempty"`
	// subscription filters used at the source for this stream
	FilterSubjects []string        `protobuf:"bytes,4,rep,name=filter_subjects,json=filterSubjects,proto3" json:"filter_subjects,omitempty"`
	ConsumerConfig *ConsumerConfig `protobuf:"bytes,5,opt,name=consumer_config,json=consumerConfig,proto3" json:"consumer_config,omitempty"`
}

func (x *StartSyncRequest) Reset() {
	*x = StartSyncRequest{}
	mi := &file_msg_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSyncRequest) ProtoMessage() {}

func (x *StartSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSyncRequest.ProtoReflect.Descriptor instead.
func (*StartSyncRequest) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

func (x *StartSyncRequest) GetSourceDeployment() string {
	if x != nil {
		return x.SourceDeployment
	}
	return ""
}

func (x *StartSyncRequest) GetSinkDeployment() string {
	if x != nil {
		return x.SinkDeployment
	}
	return ""
}

func (x *StartSyncRequest) GetSourceStreamName() string {
	if x != nil {
		return x.SourceStreamName
	}
	return ""
}

func (x *StartSyncRequest) GetFilterSubjects() []string {
	if x != nil {
		return x.FilterSubjects
	}
	return nil
}

func (x *StartSyncRequest) GetConsumerConfig() *ConsumerConfig {
	if x != nil {
		return x.ConsumerConfig
	}
	return nil
}

type StartSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the deployment to sync from
	SourceDeployment string `protobuf:"bytes,1,opt,name=source_deployment,json=sourceDeployment,proto3" json:"source_deployment,omitempty"`
	// the deployment the messages are to be published
	SinkDeployment string `protobuf:"bytes,2,opt,name=sink_deployment,json=sinkDeployment,proto3" json:"sink_deployment,omitempty"`
	// source stream name
	SourceStreamName string `protobuf:"bytes,3,opt,name=source_stream_name,json=sourceStreamName,proto3" json:"source_stream_name,omitempty"`
	// subscription filters used at the source for this stream
	FilterSubjects []string        `protobuf:"bytes,4,rep,name=filter_subjects,json=filterSubjects,proto3" json:"filter_subjects,omitempty"`
	ConsumerConfig *ConsumerConfig `protobuf:"bytes,5,opt,name=consumer_config,json=consumerConfig,proto3" json:"consumer_config,omitempty"`
}

func (x *StartSyncResponse) Reset() {
	*x = StartSyncResponse{}
	mi := &file_msg_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSyncResponse) ProtoMessage() {}

func (x *StartSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSyncResponse.ProtoReflect.Descriptor instead.
func (*StartSyncResponse) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1}
}

func (x *StartSyncResponse) GetSourceDeployment() string {
	if x != nil {
		return x.SourceDeployment
	}
	return ""
}

func (x *StartSyncResponse) GetSinkDeployment() string {
	if x != nil {
		return x.SinkDeployment
	}
	return ""
}

func (x *StartSyncResponse) GetSourceStreamName() string {
	if x != nil {
		return x.SourceStreamName
	}
	return ""
}

func (x *StartSyncResponse) GetFilterSubjects() []string {
	if x != nil {
		return x.FilterSubjects
	}
	return nil
}

func (x *StartSyncResponse) GetConsumerConfig() *ConsumerConfig {
	if x != nil {
		return x.ConsumerConfig
	}
	return nil
}

type StopSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the deployment to unsubscribe from
	SourceDeployment string `protobuf:"bytes,1,opt,name=source_deployment,json=sourceDeployment,proto3" json:"source_deployment,omitempty"`
	// the deployment the messages are to be published
	SinkDeployment string `protobuf:"bytes,2,opt,name=sink_deployment,json=sinkDeployment,proto3" json:"sink_deployment,omitempty"`
	// source stream name
	SourceStreamName string `protobuf:"bytes,3,opt,name=source_stream_name,json=sourceStreamName,proto3" json:"source_stream_name,omitempty"`
	// subscription filters used at the source for this stream
	FilterSubjects []string `protobuf:"bytes,4,rep,name=filter_subjects,json=filterSubjects,proto3" json:"filter_subjects,omitempty"`
}

func (x *StopSyncRequest) Reset() {
	*x = StopSyncRequest{}
	mi := &file_msg_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSyncRequest) ProtoMessage() {}

func (x *StopSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSyncRequest.ProtoReflect.Descriptor instead.
func (*StopSyncRequest) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{2}
}

func (x *StopSyncRequest) GetSourceDeployment() string {
	if x != nil {
		return x.SourceDeployment
	}
	return ""
}

func (x *StopSyncRequest) GetSinkDeployment() string {
	if x != nil {
		return x.SinkDeployment
	}
	return ""
}

func (x *StopSyncRequest) GetSourceStreamName() string {
	if x != nil {
		return x.SourceStreamName
	}
	return ""
}

func (x *StopSyncRequest) GetFilterSubjects() []string {
	if x != nil {
		return x.FilterSubjects
	}
	return nil
}

type StopSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the deployment where sync was requested from
	SourceDeployment string `protobuf:"bytes,1,opt,name=source_deployment,json=sourceDeployment,proto3" json:"source_deployment,omitempty"`
	// the deployment where sync was requested to
	SinkDeployment string `protobuf:"bytes,2,opt,name=sink_deployment,json=sinkDeployment,proto3" json:"sink_deployment,omitempty"`
	// source stream name
	SourceStreamName string `protobuf:"bytes,3,opt,name=source_stream_name,json=sourceStreamName,proto3" json:"source_stream_name,omitempty"`
	// set of filters used at the source for this stream
	FilterSubjects []string `protobuf:"bytes,4,rep,name=filter_subjects,json=filterSubjects,proto3" json:"filter_subjects,omitempty"`
}

func (x *StopSyncResponse) Reset() {
	*x = StopSyncResponse{}
	mi := &file_msg_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSyncResponse) ProtoMessage() {}

func (x *StopSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSyncResponse.ProtoReflect.Descriptor instead.
func (*StopSyncResponse) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{3}
}

func (x *StopSyncResponse) GetSourceDeployment() string {
	if x != nil {
		return x.SourceDeployment
	}
	return ""
}

func (x *StopSyncResponse) GetSinkDeployment() string {
	if x != nil {
		return x.SinkDeployment
	}
	return ""
}

func (x *StopSyncResponse) GetSourceStreamName() string {
	if x != nil {
		return x.SourceStreamName
	}
	return ""
}

func (x *StopSyncResponse) GetFilterSubjects() []string {
	if x != nil {
		return x.FilterSubjects
	}
	return nil
}

// ConsumerConfig defines the configuration for message consumption
type ConsumerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DeliverPolicy determines how messages are delivered from the source deployment.
	// It's used on initial subscription and when gaps are detected between source and sink.
	DeliverPolicy DeliverPolicy `protobuf:"varint,1,opt,name=deliver_policy,json=deliverPolicy,proto3,enum=com.github.bredtape.gateway.nats_sync.v1.DeliverPolicy" json:"deliver_policy,omitempty"`
	// OptStartSeq specifies the starting sequence number when deliver_policy is DELIVER_POLICY_BY_START_SEQUENCE.
	OptStartSeq uint64 `protobuf:"varint,2,opt,name=opt_start_seq,json=optStartSeq,proto3" json:"opt_start_seq,omitempty"`
	// OptStartTime specifies the starting time when deliver_policy is DELIVER_POLICY_BY_START_TIME.
	OptStartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=opt_start_time,json=optStartTime,proto3" json:"opt_start_time,omitempty"`
}

func (x *ConsumerConfig) Reset() {
	*x = ConsumerConfig{}
	mi := &file_msg_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerConfig) ProtoMessage() {}

func (x *ConsumerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerConfig.ProtoReflect.Descriptor instead.
func (*ConsumerConfig) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{4}
}

func (x *ConsumerConfig) GetDeliverPolicy() DeliverPolicy {
	if x != nil {
		return x.DeliverPolicy
	}
	return DeliverPolicy_DELIVER_POLICY_ALL
}

func (x *ConsumerConfig) GetOptStartSeq() uint64 {
	if x != nil {
		return x.OptStartSeq
	}
	return 0
}

func (x *ConsumerConfig) GetOptStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OptStartTime
	}
	return nil
}

// to mirror nats Msg (https://github.com/nats-io/nats.go/blob/main/nats.go)
type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// headers. Separate multiple values with ','. The values must not contain a ,
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data    []byte            `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// source sequence
	Sequence uint64 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// when the Msg was published to the source.
	PublishedTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=published_timestamp,json=publishedTimestamp,proto3" json:"published_timestamp,omitempty"`
}

func (x *Msg) Reset() {
	*x = Msg{}
	mi := &file_msg_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{5}
}

func (x *Msg) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Msg) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Msg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Msg) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Msg) GetPublishedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedTimestamp
	}
	return nil
}

// messages belonging to the same deployment, source stream and subscription
type Msgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// set id, a unique uuid per set of messages
	// This is needed because old irrelevant messages may be delivered, and
	// must be ignored
	SetId string `protobuf:"bytes,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	// source deployment
	SourceDeployment string `protobuf:"bytes,2,opt,name=source_deployment,json=sourceDeployment,proto3" json:"source_deployment,omitempty"`
	// sink deployment
	SinkDeployment string `protobuf:"bytes,3,opt,name=sink_deployment,json=sinkDeployment,proto3" json:"sink_deployment,omitempty"`
	// source stream name
	SourceStreamName string `protobuf:"bytes,4,opt,name=source_stream_name,json=sourceStreamName,proto3" json:"source_stream_name,omitempty"`
	// subscription filters used at the source for this stream.
	FilterSubjects []string        `protobuf:"bytes,5,rep,name=filter_subjects,json=filterSubjects,proto3" json:"filter_subjects,omitempty"`
	ConsumerConfig *ConsumerConfig `protobuf:"bytes,6,opt,name=consumer_config,json=consumerConfig,proto3" json:"consumer_config,omitempty"`
	// the sequence before this. Will be 0 if this is the first
	// batch for the subscription (or the subscription has been restarted)
	LastSequence uint64 `protobuf:"varint,7,opt,name=last_sequence,json=lastSequence,proto3" json:"last_sequence,omitempty"`
	// messages matching the stream name and subject filters.
	// Ordered by sequence. May be empty. May have gaps in sequence.
	Messages []*Msg `protobuf:"bytes,8,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *Msgs) Reset() {
	*x = Msgs{}
	mi := &file_msg_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Msgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msgs) ProtoMessage() {}

func (x *Msgs) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msgs.ProtoReflect.Descriptor instead.
func (*Msgs) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{6}
}

func (x *Msgs) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

func (x *Msgs) GetSourceDeployment() string {
	if x != nil {
		return x.SourceDeployment
	}
	return ""
}

func (x *Msgs) GetSinkDeployment() string {
	if x != nil {
		return x.SinkDeployment
	}
	return ""
}

func (x *Msgs) GetSourceStreamName() string {
	if x != nil {
		return x.SourceStreamName
	}
	return ""
}

func (x *Msgs) GetFilterSubjects() []string {
	if x != nil {
		return x.FilterSubjects
	}
	return nil
}

func (x *Msgs) GetConsumerConfig() *ConsumerConfig {
	if x != nil {
		return x.ConsumerConfig
	}
	return nil
}

func (x *Msgs) GetLastSequence() uint64 {
	if x != nil {
		return x.LastSequence
	}
	return 0
}

func (x *Msgs) GetMessages() []*Msg {
	if x != nil {
		return x.Messages
	}
	return nil
}

// acknowledge combination of stream name, subject and sequence
type Acknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// set id, matching Msgs
	SetId            string `protobuf:"bytes,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	SourceStreamName string `protobuf:"bytes,2,opt,name=source_stream_name,json=sourceStreamName,proto3" json:"source_stream_name,omitempty"`
	// source sequence number from (inclusive)
	SequenceFrom uint64 `protobuf:"varint,3,opt,name=sequence_from,json=sequenceFrom,proto3" json:"sequence_from,omitempty"`
	// source seqeuence number to (inclusive)
	SequenceTo uint64 `protobuf:"varint,4,opt,name=sequence_to,json=sequenceTo,proto3" json:"sequence_to,omitempty"`
	// to indicate not-acknowledge (NAK), in which case the subscription will be restarted.
	// If sequence_from is set, the subscription will resume from that sequence.
	// Duplicates must be acknowledged
	IsNegative bool `protobuf:"varint,5,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
	// reason, should be specified when NAK
	// possible scenarios: message loss/corrupted, message missing (gap,
	// have received newer but is missing some), rejected (because subscription is
	// not active at the sink deployment, or a conflicting subscription is active)
	Reason string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Acknowledge) Reset() {
	*x = Acknowledge{}
	mi := &file_msg_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Acknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acknowledge) ProtoMessage() {}

func (x *Acknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acknowledge.ProtoReflect.Descriptor instead.
func (*Acknowledge) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{7}
}

func (x *Acknowledge) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

func (x *Acknowledge) GetSourceStreamName() string {
	if x != nil {
		return x.SourceStreamName
	}
	return ""
}

func (x *Acknowledge) GetSequenceFrom() uint64 {
	if x != nil {
		return x.SequenceFrom
	}
	return 0
}

func (x *Acknowledge) GetSequenceTo() uint64 {
	if x != nil {
		return x.SequenceTo
	}
	return 0
}

func (x *Acknowledge) GetIsNegative() bool {
	if x != nil {
		return x.IsNegative
	}
	return false
}

func (x *Acknowledge) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// message batch. Used for lower level exchange between deployments using other means of transport than nats
type MessageBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToDeployment   string `protobuf:"bytes,1,opt,name=to_deployment,json=toDeployment,proto3" json:"to_deployment,omitempty"`
	FromDeployment string `protobuf:"bytes,2,opt,name=from_deployment,json=fromDeployment,proto3" json:"from_deployment,omitempty"`
	// timestamp of when this message has been sent
	// used to estimate latency between deployments.
	// In seconds since Unix epoch
	SentTimestamp  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=sent_timestamp,json=sentTimestamp,proto3" json:"sent_timestamp,omitempty"`
	Acknowledges   []*Acknowledge         `protobuf:"bytes,4,rep,name=acknowledges,proto3" json:"acknowledges,omitempty"`
	ListOfMessages []*Msgs                `protobuf:"bytes,5,rep,name=list_of_messages,json=listOfMessages,proto3" json:"list_of_messages,omitempty"`
}

func (x *MessageBatch) Reset() {
	*x = MessageBatch{}
	mi := &file_msg_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBatch) ProtoMessage() {}

func (x *MessageBatch) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBatch.ProtoReflect.Descriptor instead.
func (*MessageBatch) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{8}
}

func (x *MessageBatch) GetToDeployment() string {
	if x != nil {
		return x.ToDeployment
	}
	return ""
}

func (x *MessageBatch) GetFromDeployment() string {
	if x != nil {
		return x.FromDeployment
	}
	return ""
}

func (x *MessageBatch) GetSentTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.SentTimestamp
	}
	return nil
}

func (x *MessageBatch) GetAcknowledges() []*Acknowledge {
	if x != nil {
		return x.Acknowledges
	}
	return nil
}

func (x *MessageBatch) GetListOfMessages() []*Msgs {
	if x != nil {
		return x.ListOfMessages
	}
	return nil
}

var File_msg_proto protoreflect.FileDescriptor

var file_msg_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x6e, 0x6b,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62,
	0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa3, 0x02, 0x0a, 0x11,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x61,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x69, 0x6e,
	0x6b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x69, 0x6e, 0x6b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5e, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65,
	0x64, 0x74, 0x61, 0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61,
	0x74, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6f, 0x70, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x0e, 0x6f,
	0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x6f, 0x70, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xae, 0x02,
	0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x54, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72,
	0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e,
	0x61, 0x74, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d,
	0x03, 0x0a, 0x04, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xd1,
	0x01, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0xd4, 0x02, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x59, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12,
	0x58, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x4f,
	0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2a, 0xa0, 0x01, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4e,
	0x45, 0x57, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x42, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x32, 0x9c, 0x02, 0x0a,
	0x0f, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x84, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64,
	0x74, 0x61, 0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74,
	0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65,
	0x64, 0x74, 0x61, 0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61,
	0x74, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x25, 0x5a, 0x23, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61,
	0x70, 0x65, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msg_proto_rawDescOnce sync.Once
	file_msg_proto_rawDescData = file_msg_proto_rawDesc
)

func file_msg_proto_rawDescGZIP() []byte {
	file_msg_proto_rawDescOnce.Do(func() {
		file_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_msg_proto_rawDescData)
	})
	return file_msg_proto_rawDescData
}

var file_msg_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_msg_proto_goTypes = []any{
	(DeliverPolicy)(0),            // 0: com.github.bredtape.gateway.nats_sync.v1.DeliverPolicy
	(*StartSyncRequest)(nil),      // 1: com.github.bredtape.gateway.nats_sync.v1.StartSyncRequest
	(*StartSyncResponse)(nil),     // 2: com.github.bredtape.gateway.nats_sync.v1.StartSyncResponse
	(*StopSyncRequest)(nil),       // 3: com.github.bredtape.gateway.nats_sync.v1.StopSyncRequest
	(*StopSyncResponse)(nil),      // 4: com.github.bredtape.gateway.nats_sync.v1.StopSyncResponse
	(*ConsumerConfig)(nil),        // 5: com.github.bredtape.gateway.nats_sync.v1.ConsumerConfig
	(*Msg)(nil),                   // 6: com.github.bredtape.gateway.nats_sync.v1.Msg
	(*Msgs)(nil),                  // 7: com.github.bredtape.gateway.nats_sync.v1.Msgs
	(*Acknowledge)(nil),           // 8: com.github.bredtape.gateway.nats_sync.v1.Acknowledge
	(*MessageBatch)(nil),          // 9: com.github.bredtape.gateway.nats_sync.v1.MessageBatch
	nil,                           // 10: com.github.bredtape.gateway.nats_sync.v1.Msg.HeadersEntry
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_msg_proto_depIdxs = []int32{
	5,  // 0: com.github.bredtape.gateway.nats_sync.v1.StartSyncRequest.consumer_config:type_name -> com.github.bredtape.gateway.nats_sync.v1.ConsumerConfig
	5,  // 1: com.github.bredtape.gateway.nats_sync.v1.StartSyncResponse.consumer_config:type_name -> com.github.bredtape.gateway.nats_sync.v1.ConsumerConfig
	0,  // 2: com.github.bredtape.gateway.nats_sync.v1.ConsumerConfig.deliver_policy:type_name -> com.github.bredtape.gateway.nats_sync.v1.DeliverPolicy
	11, // 3: com.github.bredtape.gateway.nats_sync.v1.ConsumerConfig.opt_start_time:type_name -> google.protobuf.Timestamp
	10, // 4: com.github.bredtape.gateway.nats_sync.v1.Msg.headers:type_name -> com.github.bredtape.gateway.nats_sync.v1.Msg.HeadersEntry
	11, // 5: com.github.bredtape.gateway.nats_sync.v1.Msg.published_timestamp:type_name -> google.protobuf.Timestamp
	5,  // 6: com.github.bredtape.gateway.nats_sync.v1.Msgs.consumer_config:type_name -> com.github.bredtape.gateway.nats_sync.v1.ConsumerConfig
	6,  // 7: com.github.bredtape.gateway.nats_sync.v1.Msgs.messages:type_name -> com.github.bredtape.gateway.nats_sync.v1.Msg
	11, // 8: com.github.bredtape.gateway.nats_sync.v1.MessageBatch.sent_timestamp:type_name -> google.protobuf.Timestamp
	8,  // 9: com.github.bredtape.gateway.nats_sync.v1.MessageBatch.acknowledges:type_name -> com.github.bredtape.gateway.nats_sync.v1.Acknowledge
	7,  // 10: com.github.bredtape.gateway.nats_sync.v1.MessageBatch.list_of_messages:type_name -> com.github.bredtape.gateway.nats_sync.v1.Msgs
	1,  // 11: com.github.bredtape.gateway.nats_sync.v1.NatsSyncService.StartSync:input_type -> com.github.bredtape.gateway.nats_sync.v1.StartSyncRequest
	3,  // 12: com.github.bredtape.gateway.nats_sync.v1.NatsSyncService.StopSync:input_type -> com.github.bredtape.gateway.nats_sync.v1.StopSyncRequest
	2,  // 13: com.github.bredtape.gateway.nats_sync.v1.NatsSyncService.StartSync:output_type -> com.github.bredtape.gateway.nats_sync.v1.StartSyncResponse
	4,  // 14: com.github.bredtape.gateway.nats_sync.v1.NatsSyncService.StopSync:output_type -> com.github.bredtape.gateway.nats_sync.v1.StopSyncResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_msg_proto_init() }
func file_msg_proto_init() {
	if File_msg_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_msg_proto_goTypes,
		DependencyIndexes: file_msg_proto_depIdxs,
		EnumInfos:         file_msg_proto_enumTypes,
		MessageInfos:      file_msg_proto_msgTypes,
	}.Build()
	File_msg_proto = out.File
	file_msg_proto_rawDesc = nil
	file_msg_proto_goTypes = nil
	file_msg_proto_depIdxs = nil
}
