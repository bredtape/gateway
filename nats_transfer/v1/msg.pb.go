// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.13.0
// source: nats_transfer/v1/msg.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeliverPolicy int32

const (
	// DeliverAllPolicy starts delivering messages from the very beginning of a
	// stream. This is the default.
	DeliverPolicy_DELIVER_POLICY_ALL DeliverPolicy = 0
	// DeliverLastPolicy will start the consumer with the last sequence
	// received.
	DeliverPolicy_DELIVER_POLICY_LAST DeliverPolicy = 1
	// DeliverNewPolicy will only deliver new messages that are sent after the
	// consumer is created.
	DeliverPolicy_DELIVER_POLICY_NEW DeliverPolicy = 2
	// DeliverByStartSequencePolicy will deliver messages starting from a given
	// sequence configured with OptStartSeq in ConsumerConfig.
	DeliverPolicy_DELIVER_POLICY_BY_START_SEQUENCE DeliverPolicy = 3
	// DeliverByStartTimePolicy will deliver messages starting from a given time
	// configured with OptStartTime in ConsumerConfig.
	DeliverPolicy_DELIVER_POLICY_BY_START_TIME DeliverPolicy = 4
	// DeliverLastPerSubjectPolicy will start the consumer with the last message
	// for all subjects received.
	DeliverPolicy_DELIVER_POLICY_LAST_PER_SUBJECT DeliverPolicy = 5
)

// Enum value maps for DeliverPolicy.
var (
	DeliverPolicy_name = map[int32]string{
		0: "DELIVER_POLICY_ALL",
		1: "DELIVER_POLICY_LAST",
		2: "DELIVER_POLICY_NEW",
		3: "DELIVER_POLICY_BY_START_SEQUENCE",
		4: "DELIVER_POLICY_BY_START_TIME",
		5: "DELIVER_POLICY_LAST_PER_SUBJECT",
	}
	DeliverPolicy_value = map[string]int32{
		"DELIVER_POLICY_ALL":               0,
		"DELIVER_POLICY_LAST":              1,
		"DELIVER_POLICY_NEW":               2,
		"DELIVER_POLICY_BY_START_SEQUENCE": 3,
		"DELIVER_POLICY_BY_START_TIME":     4,
		"DELIVER_POLICY_LAST_PER_SUBJECT":  5,
	}
)

func (x DeliverPolicy) Enum() *DeliverPolicy {
	p := new(DeliverPolicy)
	*p = x
	return p
}

func (x DeliverPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliverPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_nats_transfer_v1_msg_proto_enumTypes[0].Descriptor()
}

func (DeliverPolicy) Type() protoreflect.EnumType {
	return &file_nats_transfer_v1_msg_proto_enumTypes[0]
}

func (x DeliverPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliverPolicy.Descriptor instead.
func (DeliverPolicy) EnumDescriptor() ([]byte, []int) {
	return file_nats_transfer_v1_msg_proto_rawDescGZIP(), []int{0}
}

type StreamInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// which deployment to request source info from
	RequestDeployment string `protobuf:"bytes,1,opt,name=request_deployment,json=requestDeployment,proto3" json:"request_deployment,omitempty"`
	// which deployment to send the reply back to
	ReplyDeployment string `protobuf:"bytes,2,opt,name=reply_deployment,json=replyDeployment,proto3" json:"reply_deployment,omitempty"`
	// source stream name
	StreamName string `protobuf:"bytes,3,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	// subscription filters used at the source for this stream
	SubjectFilters []string `protobuf:"bytes,4,rep,name=subject_filters,json=subjectFilters,proto3" json:"subject_filters,omitempty"`
}

func (x *StreamInfoRequest) Reset() {
	*x = StreamInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nats_transfer_v1_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfoRequest) ProtoMessage() {}

func (x *StreamInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nats_transfer_v1_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfoRequest.ProtoReflect.Descriptor instead.
func (*StreamInfoRequest) Descriptor() ([]byte, []int) {
	return file_nats_transfer_v1_msg_proto_rawDescGZIP(), []int{0}
}

func (x *StreamInfoRequest) GetRequestDeployment() string {
	if x != nil {
		return x.RequestDeployment
	}
	return ""
}

func (x *StreamInfoRequest) GetReplyDeployment() string {
	if x != nil {
		return x.ReplyDeployment
	}
	return ""
}

func (x *StreamInfoRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *StreamInfoRequest) GetSubjectFilters() []string {
	if x != nil {
		return x.SubjectFilters
	}
	return nil
}

type StreamInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// which deployment to request source info from
	RequestDeployment string `protobuf:"bytes,1,opt,name=request_deployment,json=requestDeployment,proto3" json:"request_deployment,omitempty"`
	// which deployment to send the reply back to
	ReplyDeployment string `protobuf:"bytes,2,opt,name=reply_deployment,json=replyDeployment,proto3" json:"reply_deployment,omitempty"`
	StreamName      string `protobuf:"bytes,3,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	// description from stream info
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// subscription filters used at the source for this stream
	SubjectFilters []string `protobuf:"bytes,5,rep,name=subject_filters,json=subjectFilters,proto3" json:"subject_filters,omitempty"`
	// sequence number of the last message published to the stream,
	// with the specified subject_filters
	HeadStreamSequence uint64 `protobuf:"varint,6,opt,name=head_stream_sequence,json=headStreamSequence,proto3" json:"head_stream_sequence,omitempty"`
	// the start/first sequence available for this stream and subject filters at the source
	// this may change over time, if messages are pruned at the source due to retention limits.
	// This is used to detect messages that is no longer available at the source
	StartStreamSequence uint64 `protobuf:"varint,7,opt,name=start_stream_sequence,json=startStreamSequence,proto3" json:"start_stream_sequence,omitempty"`
}

func (x *StreamInfoResponse) Reset() {
	*x = StreamInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nats_transfer_v1_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfoResponse) ProtoMessage() {}

func (x *StreamInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nats_transfer_v1_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfoResponse.ProtoReflect.Descriptor instead.
func (*StreamInfoResponse) Descriptor() ([]byte, []int) {
	return file_nats_transfer_v1_msg_proto_rawDescGZIP(), []int{1}
}

func (x *StreamInfoResponse) GetRequestDeployment() string {
	if x != nil {
		return x.RequestDeployment
	}
	return ""
}

func (x *StreamInfoResponse) GetReplyDeployment() string {
	if x != nil {
		return x.ReplyDeployment
	}
	return ""
}

func (x *StreamInfoResponse) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *StreamInfoResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StreamInfoResponse) GetSubjectFilters() []string {
	if x != nil {
		return x.SubjectFilters
	}
	return nil
}

func (x *StreamInfoResponse) GetHeadStreamSequence() uint64 {
	if x != nil {
		return x.HeadStreamSequence
	}
	return 0
}

func (x *StreamInfoResponse) GetStartStreamSequence() uint64 {
	if x != nil {
		return x.StartStreamSequence
	}
	return 0
}

// subscribe request
type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// which deployment to request source info from
	RequestDeployment string `protobuf:"bytes,1,opt,name=request_deployment,json=requestDeployment,proto3" json:"request_deployment,omitempty"`
	// which deployment to send the reply back to
	ReplyDeployment string `protobuf:"bytes,2,opt,name=reply_deployment,json=replyDeployment,proto3" json:"reply_deployment,omitempty"`
	// source stream name
	StreamName         string              `protobuf:"bytes,3,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	SubscriptionConfig *SubscriptionConfig `protobuf:"bytes,4,opt,name=subscription_config,json=subscriptionConfig,proto3" json:"subscription_config,omitempty"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nats_transfer_v1_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nats_transfer_v1_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_nats_transfer_v1_msg_proto_rawDescGZIP(), []int{2}
}

func (x *SubscribeRequest) GetRequestDeployment() string {
	if x != nil {
		return x.RequestDeployment
	}
	return ""
}

func (x *SubscribeRequest) GetReplyDeployment() string {
	if x != nil {
		return x.ReplyDeployment
	}
	return ""
}

func (x *SubscribeRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *SubscribeRequest) GetSubscriptionConfig() *SubscriptionConfig {
	if x != nil {
		return x.SubscriptionConfig
	}
	return nil
}

type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// which deployment to request source info from
	RequestDeployment string `protobuf:"bytes,1,opt,name=request_deployment,json=requestDeployment,proto3" json:"request_deployment,omitempty"`
	// which deployment to send the reply back to
	ReplyDeployment string `protobuf:"bytes,2,opt,name=reply_deployment,json=replyDeployment,proto3" json:"reply_deployment,omitempty"`
	// source stream name
	StreamName string `protobuf:"bytes,3,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	// subscription filters used at the source for this stream
	SubjectFilters     []string            `protobuf:"bytes,4,rep,name=subject_filters,json=subjectFilters,proto3" json:"subject_filters,omitempty"`
	SubscriptionConfig *SubscriptionConfig `protobuf:"bytes,5,opt,name=subscription_config,json=subscriptionConfig,proto3" json:"subscription_config,omitempty"`
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nats_transfer_v1_msg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nats_transfer_v1_msg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_nats_transfer_v1_msg_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeResponse) GetRequestDeployment() string {
	if x != nil {
		return x.RequestDeployment
	}
	return ""
}

func (x *SubscribeResponse) GetReplyDeployment() string {
	if x != nil {
		return x.ReplyDeployment
	}
	return ""
}

func (x *SubscribeResponse) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *SubscribeResponse) GetSubjectFilters() []string {
	if x != nil {
		return x.SubjectFilters
	}
	return nil
}

func (x *SubscribeResponse) GetSubscriptionConfig() *SubscriptionConfig {
	if x != nil {
		return x.SubscriptionConfig
	}
	return nil
}

// subscribe request
type UnsubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// which deployment to request source info from
	RequestDeployment string `protobuf:"bytes,1,opt,name=request_deployment,json=requestDeployment,proto3" json:"request_deployment,omitempty"`
	// which deployment to send the reply back to
	ReplyDeployment string `protobuf:"bytes,2,opt,name=reply_deployment,json=replyDeployment,proto3" json:"reply_deployment,omitempty"`
	// source stream name
	StreamName string `protobuf:"bytes,3,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
}

func (x *UnsubscribeRequest) Reset() {
	*x = UnsubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nats_transfer_v1_msg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeRequest) ProtoMessage() {}

func (x *UnsubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nats_transfer_v1_msg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeRequest) Descriptor() ([]byte, []int) {
	return file_nats_transfer_v1_msg_proto_rawDescGZIP(), []int{4}
}

func (x *UnsubscribeRequest) GetRequestDeployment() string {
	if x != nil {
		return x.RequestDeployment
	}
	return ""
}

func (x *UnsubscribeRequest) GetReplyDeployment() string {
	if x != nil {
		return x.ReplyDeployment
	}
	return ""
}

func (x *UnsubscribeRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

type UnsubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// which deployment to request source info from
	RequestDeployment string `protobuf:"bytes,1,opt,name=request_deployment,json=requestDeployment,proto3" json:"request_deployment,omitempty"`
	// which deployment to send the reply back to
	ReplyDeployment string `protobuf:"bytes,2,opt,name=reply_deployment,json=replyDeployment,proto3" json:"reply_deployment,omitempty"`
	// source stream name
	StreamName string `protobuf:"bytes,3,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	// subscription filters used at the source for this stream
	SubjectFilters []string `protobuf:"bytes,4,rep,name=subject_filters,json=subjectFilters,proto3" json:"subject_filters,omitempty"`
}

func (x *UnsubscribeResponse) Reset() {
	*x = UnsubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nats_transfer_v1_msg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeResponse) ProtoMessage() {}

func (x *UnsubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nats_transfer_v1_msg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeResponse.ProtoReflect.Descriptor instead.
func (*UnsubscribeResponse) Descriptor() ([]byte, []int) {
	return file_nats_transfer_v1_msg_proto_rawDescGZIP(), []int{5}
}

func (x *UnsubscribeResponse) GetRequestDeployment() string {
	if x != nil {
		return x.RequestDeployment
	}
	return ""
}

func (x *UnsubscribeResponse) GetReplyDeployment() string {
	if x != nil {
		return x.ReplyDeployment
	}
	return ""
}

func (x *UnsubscribeResponse) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *UnsubscribeResponse) GetSubjectFilters() []string {
	if x != nil {
		return x.SubjectFilters
	}
	return nil
}

type SubscriptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subscription filters to filter the stream on.
	SubjectFilters []string      `protobuf:"bytes,1,rep,name=subject_filters,json=subjectFilters,proto3" json:"subject_filters,omitempty"`
	DeliverPolicy  DeliverPolicy `protobuf:"varint,2,opt,name=deliver_policy,json=deliverPolicy,proto3,enum=com.github.bredtape.gateway.nats_transfer.v1.DeliverPolicy" json:"deliver_policy,omitempty"`
	// used when deliver policy is by start sequence
	OptStartSeq uint64 `protobuf:"varint,3,opt,name=opt_start_seq,json=optStartSeq,proto3" json:"opt_start_seq,omitempty"`
	// used when deliver policy is by start time. In seconds since Unix epoch
	OptStartTime float64 `protobuf:"fixed64,4,opt,name=opt_start_time,json=optStartTime,proto3" json:"opt_start_time,omitempty"`
}

func (x *SubscriptionConfig) Reset() {
	*x = SubscriptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nats_transfer_v1_msg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionConfig) ProtoMessage() {}

func (x *SubscriptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_nats_transfer_v1_msg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionConfig.ProtoReflect.Descriptor instead.
func (*SubscriptionConfig) Descriptor() ([]byte, []int) {
	return file_nats_transfer_v1_msg_proto_rawDescGZIP(), []int{6}
}

func (x *SubscriptionConfig) GetSubjectFilters() []string {
	if x != nil {
		return x.SubjectFilters
	}
	return nil
}

func (x *SubscriptionConfig) GetDeliverPolicy() DeliverPolicy {
	if x != nil {
		return x.DeliverPolicy
	}
	return DeliverPolicy_DELIVER_POLICY_ALL
}

func (x *SubscriptionConfig) GetOptStartSeq() uint64 {
	if x != nil {
		return x.OptStartSeq
	}
	return 0
}

func (x *SubscriptionConfig) GetOptStartTime() float64 {
	if x != nil {
		return x.OptStartTime
	}
	return 0
}

// batch of messages belonging to the same deployment, stream name and subscription
type MsgBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source stream name
	StreamName string `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	// subscription filters used at the source for this stream
	SubjectFilters []string `protobuf:"bytes,3,rep,name=subject_filters,json=subjectFilters,proto3" json:"subject_filters,omitempty"`
	// messages matching the stream name and subject filters
	// ordered by sequence
	Messages []*Msg `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *MsgBatch) Reset() {
	*x = MsgBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nats_transfer_v1_msg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgBatch) ProtoMessage() {}

func (x *MsgBatch) ProtoReflect() protoreflect.Message {
	mi := &file_nats_transfer_v1_msg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgBatch.ProtoReflect.Descriptor instead.
func (*MsgBatch) Descriptor() ([]byte, []int) {
	return file_nats_transfer_v1_msg_proto_rawDescGZIP(), []int{7}
}

func (x *MsgBatch) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *MsgBatch) GetSubjectFilters() []string {
	if x != nil {
		return x.SubjectFilters
	}
	return nil
}

func (x *MsgBatch) GetMessages() []*Msg {
	if x != nil {
		return x.Messages
	}
	return nil
}

// to mirror nats Msg (https://github.com/nats-io/nats.go/blob/main/nats.go)
type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// headers. Separate multiple values with ','. The values must not contain a ,
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data    []byte            `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// source sequence
	SourceSequence uint64 `protobuf:"varint,5,opt,name=source_sequence,json=sourceSequence,proto3" json:"source_sequence,omitempty"`
	// sequence of the previous Msg that belongs to the same stream
	// may have gaps (depending on the source subscription filter used).
	// This is needed to ensure order and completeness of all Msg
	// NB: The first message received when starting a subscription may be 0
	PreviousSourceSequence uint64 `protobuf:"varint,6,opt,name=previous_source_sequence,json=previousSourceSequence,proto3" json:"previous_source_sequence,omitempty"`
	// when the Msg was published to the source. In seconds since Unix epoch
	PublishTimestamp float64 `protobuf:"fixed64,4,opt,name=publish_timestamp,json=publishTimestamp,proto3" json:"publish_timestamp,omitempty"`
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nats_transfer_v1_msg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_nats_transfer_v1_msg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_nats_transfer_v1_msg_proto_rawDescGZIP(), []int{8}
}

func (x *Msg) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Msg) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Msg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Msg) GetSourceSequence() uint64 {
	if x != nil {
		return x.SourceSequence
	}
	return 0
}

func (x *Msg) GetPreviousSourceSequence() uint64 {
	if x != nil {
		return x.PreviousSourceSequence
	}
	return 0
}

func (x *Msg) GetPublishTimestamp() float64 {
	if x != nil {
		return x.PublishTimestamp
	}
	return 0
}

// acknowledge combination of stream name, subject and sequence
type Acknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName     string `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	Subject        string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	SourceSequence uint64 `protobuf:"varint,3,opt,name=source_sequence,json=sourceSequence,proto3" json:"source_sequence,omitempty"`
	// to indicate not-acknowledge, in which case the Msg should be retransmitted
	IsNak bool `protobuf:"varint,4,opt,name=is_nak,json=isNak,proto3" json:"is_nak,omitempty"`
	// reason, should be specified when NAK
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// lowest sequence number acknowledged
	LowestAckSequence uint64 `protobuf:"varint,6,opt,name=lowest_ack_sequence,json=lowestAckSequence,proto3" json:"lowest_ack_sequence,omitempty"`
}

func (x *Acknowledge) Reset() {
	*x = Acknowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nats_transfer_v1_msg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acknowledge) ProtoMessage() {}

func (x *Acknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_nats_transfer_v1_msg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acknowledge.ProtoReflect.Descriptor instead.
func (*Acknowledge) Descriptor() ([]byte, []int) {
	return file_nats_transfer_v1_msg_proto_rawDescGZIP(), []int{9}
}

func (x *Acknowledge) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *Acknowledge) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Acknowledge) GetSourceSequence() uint64 {
	if x != nil {
		return x.SourceSequence
	}
	return 0
}

func (x *Acknowledge) GetIsNak() bool {
	if x != nil {
		return x.IsNak
	}
	return false
}

func (x *Acknowledge) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Acknowledge) GetLowestAckSequence() uint64 {
	if x != nil {
		return x.LowestAckSequence
	}
	return 0
}

// message exchange. Used for lower level file exchange
type MessageExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acks     []*Acknowledge `protobuf:"bytes,1,rep,name=acks,proto3" json:"acks,omitempty"`
	Messages []*MsgBatch    `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	// timestamp of when this message has been sent
	// used to estimate latency when different deployments.
	// In seconds since Unix epoch
	SentTimestamp float64 `protobuf:"fixed64,3,opt,name=sent_timestamp,json=sentTimestamp,proto3" json:"sent_timestamp,omitempty"`
}

func (x *MessageExchange) Reset() {
	*x = MessageExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nats_transfer_v1_msg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageExchange) ProtoMessage() {}

func (x *MessageExchange) ProtoReflect() protoreflect.Message {
	mi := &file_nats_transfer_v1_msg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageExchange.ProtoReflect.Descriptor instead.
func (*MessageExchange) Descriptor() ([]byte, []int) {
	return file_nats_transfer_v1_msg_proto_rawDescGZIP(), []int{10}
}

func (x *MessageExchange) GetAcks() []*Acknowledge {
	if x != nil {
		return x.Acks
	}
	return nil
}

func (x *MessageExchange) GetMessages() []*MsgBatch {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessageExchange) GetSentTimestamp() float64 {
	if x != nil {
		return x.SentTimestamp
	}
	return 0
}

var File_nats_transfer_v1_msg_proto protoreflect.FileDescriptor

var file_nats_transfer_v1_msg_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70,
	0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x68, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xaa, 0x02, 0x0a, 0x11, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x71, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62,
	0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x6e, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x13, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74,
	0x61, 0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6f, 0x70, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x71, 0x12, 0x24, 0x0a,
	0x0e, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61,
	0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x03, 0x4d, 0x73,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x58, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61,
	0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x6e, 0x61, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x61, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x77, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x04,
	0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x04, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74,
	0x61, 0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0xc5, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4e, 0x45, 0x57, 0x10,
	0x02, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x51,
	0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x4c, 0x49, 0x56,
	0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x05, 0x32, 0xce,
	0x03, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x09,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0b, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x40, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61, 0x70, 0x65,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x64, 0x74, 0x61,
	0x70, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72,
	0x65, 0x64, 0x74, 0x61, 0x70, 0x65, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x6e,
	0x61, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nats_transfer_v1_msg_proto_rawDescOnce sync.Once
	file_nats_transfer_v1_msg_proto_rawDescData = file_nats_transfer_v1_msg_proto_rawDesc
)

func file_nats_transfer_v1_msg_proto_rawDescGZIP() []byte {
	file_nats_transfer_v1_msg_proto_rawDescOnce.Do(func() {
		file_nats_transfer_v1_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_nats_transfer_v1_msg_proto_rawDescData)
	})
	return file_nats_transfer_v1_msg_proto_rawDescData
}

var file_nats_transfer_v1_msg_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nats_transfer_v1_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_nats_transfer_v1_msg_proto_goTypes = []any{
	(DeliverPolicy)(0),          // 0: com.github.bredtape.gateway.nats_transfer.v1.DeliverPolicy
	(*StreamInfoRequest)(nil),   // 1: com.github.bredtape.gateway.nats_transfer.v1.StreamInfoRequest
	(*StreamInfoResponse)(nil),  // 2: com.github.bredtape.gateway.nats_transfer.v1.StreamInfoResponse
	(*SubscribeRequest)(nil),    // 3: com.github.bredtape.gateway.nats_transfer.v1.SubscribeRequest
	(*SubscribeResponse)(nil),   // 4: com.github.bredtape.gateway.nats_transfer.v1.SubscribeResponse
	(*UnsubscribeRequest)(nil),  // 5: com.github.bredtape.gateway.nats_transfer.v1.UnsubscribeRequest
	(*UnsubscribeResponse)(nil), // 6: com.github.bredtape.gateway.nats_transfer.v1.UnsubscribeResponse
	(*SubscriptionConfig)(nil),  // 7: com.github.bredtape.gateway.nats_transfer.v1.SubscriptionConfig
	(*MsgBatch)(nil),            // 8: com.github.bredtape.gateway.nats_transfer.v1.MsgBatch
	(*Msg)(nil),                 // 9: com.github.bredtape.gateway.nats_transfer.v1.Msg
	(*Acknowledge)(nil),         // 10: com.github.bredtape.gateway.nats_transfer.v1.Acknowledge
	(*MessageExchange)(nil),     // 11: com.github.bredtape.gateway.nats_transfer.v1.MessageExchange
	nil,                         // 12: com.github.bredtape.gateway.nats_transfer.v1.Msg.HeadersEntry
}
var file_nats_transfer_v1_msg_proto_depIdxs = []int32{
	7,  // 0: com.github.bredtape.gateway.nats_transfer.v1.SubscribeRequest.subscription_config:type_name -> com.github.bredtape.gateway.nats_transfer.v1.SubscriptionConfig
	7,  // 1: com.github.bredtape.gateway.nats_transfer.v1.SubscribeResponse.subscription_config:type_name -> com.github.bredtape.gateway.nats_transfer.v1.SubscriptionConfig
	0,  // 2: com.github.bredtape.gateway.nats_transfer.v1.SubscriptionConfig.deliver_policy:type_name -> com.github.bredtape.gateway.nats_transfer.v1.DeliverPolicy
	9,  // 3: com.github.bredtape.gateway.nats_transfer.v1.MsgBatch.messages:type_name -> com.github.bredtape.gateway.nats_transfer.v1.Msg
	12, // 4: com.github.bredtape.gateway.nats_transfer.v1.Msg.headers:type_name -> com.github.bredtape.gateway.nats_transfer.v1.Msg.HeadersEntry
	10, // 5: com.github.bredtape.gateway.nats_transfer.v1.MessageExchange.acks:type_name -> com.github.bredtape.gateway.nats_transfer.v1.Acknowledge
	8,  // 6: com.github.bredtape.gateway.nats_transfer.v1.MessageExchange.messages:type_name -> com.github.bredtape.gateway.nats_transfer.v1.MsgBatch
	1,  // 7: com.github.bredtape.gateway.nats_transfer.v1.NatsTransferService.GetStreamInfo:input_type -> com.github.bredtape.gateway.nats_transfer.v1.StreamInfoRequest
	3,  // 8: com.github.bredtape.gateway.nats_transfer.v1.NatsTransferService.Subscribe:input_type -> com.github.bredtape.gateway.nats_transfer.v1.SubscribeRequest
	5,  // 9: com.github.bredtape.gateway.nats_transfer.v1.NatsTransferService.Unsubscribe:input_type -> com.github.bredtape.gateway.nats_transfer.v1.UnsubscribeRequest
	2,  // 10: com.github.bredtape.gateway.nats_transfer.v1.NatsTransferService.GetStreamInfo:output_type -> com.github.bredtape.gateway.nats_transfer.v1.StreamInfoResponse
	4,  // 11: com.github.bredtape.gateway.nats_transfer.v1.NatsTransferService.Subscribe:output_type -> com.github.bredtape.gateway.nats_transfer.v1.SubscribeResponse
	6,  // 12: com.github.bredtape.gateway.nats_transfer.v1.NatsTransferService.Unsubscribe:output_type -> com.github.bredtape.gateway.nats_transfer.v1.UnsubscribeResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_nats_transfer_v1_msg_proto_init() }
func file_nats_transfer_v1_msg_proto_init() {
	if File_nats_transfer_v1_msg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nats_transfer_v1_msg_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*StreamInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nats_transfer_v1_msg_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StreamInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nats_transfer_v1_msg_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nats_transfer_v1_msg_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nats_transfer_v1_msg_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UnsubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nats_transfer_v1_msg_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UnsubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nats_transfer_v1_msg_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SubscriptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nats_transfer_v1_msg_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MsgBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nats_transfer_v1_msg_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nats_transfer_v1_msg_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Acknowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nats_transfer_v1_msg_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MessageExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nats_transfer_v1_msg_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nats_transfer_v1_msg_proto_goTypes,
		DependencyIndexes: file_nats_transfer_v1_msg_proto_depIdxs,
		EnumInfos:         file_nats_transfer_v1_msg_proto_enumTypes,
		MessageInfos:      file_nats_transfer_v1_msg_proto_msgTypes,
	}.Build()
	File_nats_transfer_v1_msg_proto = out.File
	file_nats_transfer_v1_msg_proto_rawDesc = nil
	file_nats_transfer_v1_msg_proto_goTypes = nil
	file_nats_transfer_v1_msg_proto_depIdxs = nil
}
