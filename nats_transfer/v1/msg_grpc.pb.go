// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.13.0
// source: nats_transfer/v1/msg.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NatsTransferService_GetStreamInfo_FullMethodName = "/com.github.bredtape.gateway.nats_transfer.v1.NatsTransferService/GetStreamInfo"
	NatsTransferService_Subscribe_FullMethodName     = "/com.github.bredtape.gateway.nats_transfer.v1.NatsTransferService/Subscribe"
	NatsTransferService_Unsubscribe_FullMethodName   = "/com.github.bredtape.gateway.nats_transfer.v1.NatsTransferService/Unsubscribe"
)

// NatsTransferServiceClient is the client API for NatsTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NatsTransferServiceClient interface {
	GetStreamInfo(ctx context.Context, in *StreamInfoRequest, opts ...grpc.CallOption) (*StreamInfoResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
}

type natsTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNatsTransferServiceClient(cc grpc.ClientConnInterface) NatsTransferServiceClient {
	return &natsTransferServiceClient{cc}
}

func (c *natsTransferServiceClient) GetStreamInfo(ctx context.Context, in *StreamInfoRequest, opts ...grpc.CallOption) (*StreamInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamInfoResponse)
	err := c.cc.Invoke(ctx, NatsTransferService_GetStreamInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natsTransferServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, NatsTransferService_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natsTransferServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, NatsTransferService_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NatsTransferServiceServer is the server API for NatsTransferService service.
// All implementations must embed UnimplementedNatsTransferServiceServer
// for forward compatibility.
type NatsTransferServiceServer interface {
	GetStreamInfo(context.Context, *StreamInfoRequest) (*StreamInfoResponse, error)
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	mustEmbedUnimplementedNatsTransferServiceServer()
}

// UnimplementedNatsTransferServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNatsTransferServiceServer struct{}

func (UnimplementedNatsTransferServiceServer) GetStreamInfo(context.Context, *StreamInfoRequest) (*StreamInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamInfo not implemented")
}
func (UnimplementedNatsTransferServiceServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedNatsTransferServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedNatsTransferServiceServer) mustEmbedUnimplementedNatsTransferServiceServer() {}
func (UnimplementedNatsTransferServiceServer) testEmbeddedByValue()                             {}

// UnsafeNatsTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NatsTransferServiceServer will
// result in compilation errors.
type UnsafeNatsTransferServiceServer interface {
	mustEmbedUnimplementedNatsTransferServiceServer()
}

func RegisterNatsTransferServiceServer(s grpc.ServiceRegistrar, srv NatsTransferServiceServer) {
	// If the following call pancis, it indicates UnimplementedNatsTransferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NatsTransferService_ServiceDesc, srv)
}

func _NatsTransferService_GetStreamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsTransferServiceServer).GetStreamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NatsTransferService_GetStreamInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsTransferServiceServer).GetStreamInfo(ctx, req.(*StreamInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatsTransferService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsTransferServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NatsTransferService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsTransferServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatsTransferService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsTransferServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NatsTransferService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsTransferServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NatsTransferService_ServiceDesc is the grpc.ServiceDesc for NatsTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NatsTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.bredtape.gateway.nats_transfer.v1.NatsTransferService",
	HandlerType: (*NatsTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStreamInfo",
			Handler:    _NatsTransferService_GetStreamInfo_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _NatsTransferService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _NatsTransferService_Unsubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nats_transfer/v1/msg.proto",
}
