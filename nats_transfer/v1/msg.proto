syntax = "proto3";

package com.github.bredtape.gateway.nats_transfer.v1;

option go_package = "github.com/bredtape/gateway/nats_transfer/v1";

service NatsTransferService {
  rpc GetStreamInfo(StreamInfoRequest) returns (StreamInfoResponse);
  rpc Subscribe(SubscribeRequest) returns (SubscribeResponse);
  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse);
}

message StreamInfoRequest {
  // which deployment to request source info from
  string request_deployment = 1;

  // which deployment to send the reply back to
  string reply_deployment = 2;

  // source stream name
  string stream_name = 3;

  // subscription filters used at the source for this stream
  repeated string subject_filters = 4;
}

message StreamInfoResponse {
  // which deployment to request source info from
  string request_deployment = 1;

  // which deployment to send the reply back to
  string reply_deployment = 2;

  string stream_name = 3;

  // description from stream info
  string description = 4;

  // subscription filters used at the source for this stream
  repeated string subject_filters = 5;

  // sequence number of the last message published to the stream,
  // with the specified subject_filters
  uint64 head_stream_sequence = 6;

  // the start/first sequence available for this stream and subject filters at the source
  // this may change over time, if messages are pruned at the source due to retention limits.
  // This is used to detect messages that is no longer available at the source
  uint64 start_stream_sequence = 7;
}

// subscribe request
message SubscribeRequest {
  // which deployment to request source info from
  string request_deployment = 1;

  // which deployment to send the reply back to
  string reply_deployment = 2;

  // source stream name
  string stream_name = 3;

  SubscriptionConfig subscription_config = 4;
}

message SubscribeResponse {
  // which deployment to request source info from
  string request_deployment = 1;

  // which deployment to send the reply back to
  string reply_deployment = 2;

  // source stream name
  string stream_name = 3;

  // subscription filters used at the source for this stream
  repeated string subject_filters = 4;

  SubscriptionConfig subscription_config = 5;
}

// subscribe request
message UnsubscribeRequest {
  // which deployment to request source info from
  string request_deployment = 1;

  // which deployment to send the reply back to
  string reply_deployment = 2;

  // source stream name
  string stream_name = 3;
}

message UnsubscribeResponse {
  // which deployment to request source info from
  string request_deployment = 1;

  // which deployment to send the reply back to
  string reply_deployment = 2;

  // source stream name
  string stream_name = 3;

  // subscription filters used at the source for this stream
  repeated string subject_filters = 4;
}

message SubscriptionConfig {
  // subscription filters to filter the stream on.
  repeated string subject_filters = 1;

  DeliverPolicy deliver_policy = 2;

  // used when deliver policy is by start sequence
  uint64 opt_start_seq = 3;

  // used when deliver policy is by start time. In seconds since Unix epoch
  double opt_start_time = 4;
}


// batch of messages belonging to the same deployment, stream name and subscription
message MsgBatch {
  // source stream name
  string stream_name = 2;

  // subscription filters used at the source for this stream
  repeated string subject_filters = 3;

  // messages matching the stream name and subject filters
  // ordered by sequence
  repeated Msg messages = 4;
}

// to mirror nats Msg (https://github.com/nats-io/nats.go/blob/main/nats.go)
message Msg {
  string subject = 1;

  // headers. Separate multiple values with ','. The values must not contain a ,
  map<string, string> headers = 2;

  bytes data = 3;

  // metadata fields

  // source sequence
  uint64 source_sequence = 5;

  // sequence of the previous Msg that belongs to the same stream
  // may have gaps (depending on the source subscription filter used).
  // This is needed to ensure order and completeness of all Msg
  // NB: The first message received when starting a subscription may be 0
  uint64 previous_source_sequence = 6;

  // when the Msg was published to the source. In seconds since Unix epoch
  double publish_timestamp = 4;
}

// acknowledge combination of stream name, subject and sequence
message Acknowledge {
  string stream_name = 1;
  string subject = 2;
  uint64 source_sequence = 3;

  // to indicate not-acknowledge, in which case the Msg should be retransmitted
  bool is_nak = 4;

  // reason, should be specified when NAK
  string reason = 5;

  // lowest sequence number acknowledged
  uint64 lowest_ack_sequence = 6;
}

// message exchange. Used for lower level file exchange
message MessageExchange {
  repeated Acknowledge acks = 1;
  repeated MsgBatch messages = 2;

  // timestamp of when this message has been sent
  // used to estimate latency when different deployments.
  // In seconds since Unix epoch
  double sent_timestamp = 3;
}

enum DeliverPolicy {
  // DeliverAllPolicy starts delivering messages from the very beginning of a
	// stream. This is the default.
	DELIVER_POLICY_ALL = 0;

	// DeliverLastPolicy will start the consumer with the last sequence
	// received.
  DELIVER_POLICY_LAST = 1;

	// DeliverNewPolicy will only deliver new messages that are sent after the
	// consumer is created.
	DELIVER_POLICY_NEW = 2;

	// DeliverByStartSequencePolicy will deliver messages starting from a given
	// sequence configured with OptStartSeq in ConsumerConfig.
	DELIVER_POLICY_BY_START_SEQUENCE = 3;

	// DeliverByStartTimePolicy will deliver messages starting from a given time
	// configured with OptStartTime in ConsumerConfig.
	DELIVER_POLICY_BY_START_TIME = 4;

	// DeliverLastPerSubjectPolicy will start the consumer with the last message
	// for all subjects received.
	DELIVER_POLICY_LAST_PER_SUBJECT = 5;
}
