// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.13.0
// source: nats_sync/v1/msg.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NatsSyncService_Subscribe_FullMethodName   = "/com.github.bredtape.gateway.nats_transfer.v1.NatsSyncService/Subscribe"
	NatsSyncService_Unsubscribe_FullMethodName = "/com.github.bredtape.gateway.nats_transfer.v1.NatsSyncService/Unsubscribe"
)

// NatsSyncServiceClient is the client API for NatsSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// nats sync service, to initiate sync of a stream from one deployment to another.
// To bootstrap the NatsSyncService itself, all deployments must have the Subscribe requests published to their designated nats stream for this service (which matches either the source or target deployment)
type NatsSyncServiceClient interface {
	// Subscribe to a stream
	// Only one subscription can be active pr combination of source_deployment, source_stream_name and target_deployment
	// You cannot change a subscription but must send a UnsubscribeRequest, then a new SubscribeRequest
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	// Unsubscribe from a stream. See note on Subscribe
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
}

type natsSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNatsSyncServiceClient(cc grpc.ClientConnInterface) NatsSyncServiceClient {
	return &natsSyncServiceClient{cc}
}

func (c *natsSyncServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, NatsSyncService_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natsSyncServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, NatsSyncService_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NatsSyncServiceServer is the server API for NatsSyncService service.
// All implementations must embed UnimplementedNatsSyncServiceServer
// for forward compatibility.
//
// nats sync service, to initiate sync of a stream from one deployment to another.
// To bootstrap the NatsSyncService itself, all deployments must have the Subscribe requests published to their designated nats stream for this service (which matches either the source or target deployment)
type NatsSyncServiceServer interface {
	// Subscribe to a stream
	// Only one subscription can be active pr combination of source_deployment, source_stream_name and target_deployment
	// You cannot change a subscription but must send a UnsubscribeRequest, then a new SubscribeRequest
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	// Unsubscribe from a stream. See note on Subscribe
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	mustEmbedUnimplementedNatsSyncServiceServer()
}

// UnimplementedNatsSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNatsSyncServiceServer struct{}

func (UnimplementedNatsSyncServiceServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedNatsSyncServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedNatsSyncServiceServer) mustEmbedUnimplementedNatsSyncServiceServer() {}
func (UnimplementedNatsSyncServiceServer) testEmbeddedByValue()                         {}

// UnsafeNatsSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NatsSyncServiceServer will
// result in compilation errors.
type UnsafeNatsSyncServiceServer interface {
	mustEmbedUnimplementedNatsSyncServiceServer()
}

func RegisterNatsSyncServiceServer(s grpc.ServiceRegistrar, srv NatsSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedNatsSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NatsSyncService_ServiceDesc, srv)
}

func _NatsSyncService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsSyncServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NatsSyncService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsSyncServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatsSyncService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsSyncServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NatsSyncService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsSyncServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NatsSyncService_ServiceDesc is the grpc.ServiceDesc for NatsSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NatsSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.bredtape.gateway.nats_transfer.v1.NatsSyncService",
	HandlerType: (*NatsSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _NatsSyncService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _NatsSyncService_Unsubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nats_sync/v1/msg.proto",
}
