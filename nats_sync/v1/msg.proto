syntax = "proto3";

package com.github.bredtape.gateway.nats_transfer.v1;

option go_package = "github.com/bredtape/gateway/nats_sync/v1";


// nats sync service, to initiate sync of a stream from one deployment to another.
// To bootstrap the NatsSyncService itself, all deployments must have the Subscribe requests published to their designated nats stream for this service (which matches either the source or target deployment)
service NatsSyncService {
  // Subscribe to a stream
  // Only one subscription can be active pr combination of source_deployment, source_stream_name and target_deployment
  // You cannot change a subscription but must send a UnsubscribeRequest, then a new SubscribeRequest
  rpc Subscribe(SubscribeRequest) returns (SubscribeResponse);

  // Unsubscribe from a stream. See note on Subscribe
  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse);
}

// subscribe request
message SubscribeRequest {
  // the deployment to subscribe from
  string source_deployment = 1;

  // the deployment to send the reply back to
  string reply_deployment = 2;

  // the target deployment, where the messages are to be published.
  string target_deployment = 3;

  // source stream name
  string source_stream_name = 4;

  // target stream name
  // subject hierachy must match the source stream
  string target_stream_name = 5;

  // subscription filters used at the source for this stream
  repeated string filter_subjects = 6;

  ConsumerConfig consumer_config = 7;
}

message SubscribeResponse {
  // the deployment to subscribe from
  string source_deployment = 1;

  // the deployment to send the reply back to
  string reply_deployment = 2;

  // the deployment the messages are to be published
  string target_deployment = 3;

  // source stream name
  string source_stream_name = 4;

  // target stream name
  // subject hierachy must match the source stream
  string target_stream_name = 5;

  // subscription filters used at the source for this stream
  repeated string filter_subjects = 6;

  ConsumerConfig consumer_config = 7;
}

// unsubscribe request
message UnsubscribeRequest {
  // the deployment to unsubscribe from
  string source_deployment = 1;

  // the deployment to send the reply back to
  string reply_deployment = 2;

  // the deployment the messages are to be published
  string target_deployment = 3;

  // source stream name
  string source_stream_name = 4;

  // target stream name
  // subject hierachy must match the source stream
  string target_stream_name = 5;

  // subscription filters used at the source for this stream
  repeated string filter_subjects = 6;
}

message UnsubscribeResponse {
  // the deployment to unsubscribe from
  string source_deployment = 1;

  // the deployment to send the reply back to
  string reply_deployment = 2;

  // the deployment the messages are to be published
  string target_deployment = 3;

  // source stream name
  string source_stream_name = 4;

  // target stream name
  // subject hierachy must match the source stream
  string target_stream_name = 5;

  // set of filters used at the source for this stream
  repeated string filter_subjects = 6;

}

message ConsumerConfig {
  // deliver policy at the source deployment. Used on initial subscription
  // and when gaps have been detected between source and target (because messages have been
  // deleted due to retention policy at the source/target).
  // Otherwise, sequence will be used.
  DeliverPolicy deliver_policy = 1;

  // used when deliver policy is by start sequence
  uint64 opt_start_seq = 2;

  // used when deliver policy is by start time. In seconds since Unix epoch
  double opt_start_time = 3;
}

enum DeliverPolicy {
  // DeliverAllPolicy starts delivering messages from the very beginning of a
	// stream. This is the default.
	DELIVER_POLICY_ALL = 0;

	// DeliverLastPolicy will start the consumer with the last sequence
	// received.
  DELIVER_POLICY_LAST = 1;

	// DeliverNewPolicy will only deliver new messages that are sent after the
	// consumer is created.
	DELIVER_POLICY_NEW = 2;

	// DeliverByStartSequencePolicy will deliver messages starting from a given
	// sequence configured with OptStartSeq in ConsumerConfig.
	DELIVER_POLICY_BY_START_SEQUENCE = 3;

	// DeliverByStartTimePolicy will deliver messages starting from a given time
	// configured with OptStartTime in ConsumerConfig.
	DELIVER_POLICY_BY_START_TIME = 4;

	// DeliverLastPerSubjectPolicy is not implemented, because it will require
  // the source to signal when each message per subject have been received
}

// to mirror nats Msg (https://github.com/nats-io/nats.go/blob/main/nats.go)
message Msg {
  string subject = 1;

  // headers. Separate multiple values with ','. The values must not contain a ,
  map<string, string> headers = 2;

  bytes data = 3;

  // metadata fields

  // source sequence
  uint64 sequence = 4;

  // when the Msg was published to the source. In seconds since Unix epoch
  double publish_timestamp = 6;
}

// messages belonging to the same deployment, source stream and subscription
message Msgs {
  // set id, a unique uuid per set of messages
  // This is needed because old irrelevant messages may be delivered, and
  // must be ignored
  bytes set_id = 1;

  // source deployment
  string source_deployment = 2;

  // target deployment
  string target_deployment = 3;

  // source stream name
  string source_stream_name = 4;

  // subscription filters used at the source for this stream.
  repeated string filter_subjects = 5;

  ConsumerConfig consumer_config = 6;

  // the sequence before this. Will be 0 if this is the first
  // batch for the subscription (or the subscription has been restarted)
  uint64 last_sequence = 7;

  // messages matching the stream name and subject filters.
  // Ordered by sequence. May be empty. May have gaps in sequence.
  repeated Msg messages = 9;
}

// acknowledge combination of stream name, subject and sequence
message Acknowledge {
  // set id, matching Msgs
  bytes set_id = 1;

  string source_stream_name = 2;

  // source sequence number from (inclusive)
  uint64 sequence_from = 3;

  // source seqeuence number to (inclusive)
  uint64 sequence_to = 4;

  // to indicate not-acknowledge, in which case the subscription will be restarted.
  // If lowest_ack_sequence is set, the subscription will resume from that sequence.
  // Duplicates must be acknowledged
  bool is_nak = 5;

  // reason, should be specified when NAK
  // possible scenarios: message loss/corrupted, message missing (gap, have received newer but is missing some), rejected (because subscription is not active at the target deployment, or a conflicting subscription is active)
  string reason = 6;
}

// message batch. Used for lower level exchange between deployments using other means of transport than nats
message MessageBatch {
  string to_deployment = 1;
  string from_deployment = 2;

  // timestamp of when this message has been sent
  // used to estimate latency between deployments.
  // In seconds since Unix epoch
  double sent_timestamp = 3;

  repeated Acknowledge acknowledges = 4;
  repeated Msgs list_of_messages = 5;
}

